buildscript {
    ext {
        springBootVersion = '3.1.3'
        spotbugsVersion = '5.1.3'
        junitVersion = '4.13.2'
    }
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.github.spotbugs.snom:spotbugs-gradle-plugin:${spotbugsVersion}")
    }
}

apply plugin: 'pmd'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'com.github.spotbugs'
apply plugin: 'checkstyle'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'de.smartsquare'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 17

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    testImplementation "junit:junit:$junitVersion"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

pmd {
    pmdTest.enabled = false
    ruleSets = [
            'java-basic',
            'java-braces',
            'java-clone',
            'java-codesize',
            'java-comments',
            'java-controversial',
            'java-coupling',
            'java-design',
            'java-empty',
            'java-finalizers',
            'java-imports',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
    ]
}

spotbugs {
    ignoreFailures = true
    spotbugsTest.enabled = false
}

spotbugsMain {
    reports {
        xml.required = false
        html.required = true
    }
}

tasks.withType(Pmd) {
    reports {
        xml.required = true
        html.required = true
    }
}

pmd {
    ignoreFailures = true
    pmdTest.enabled = false
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = true
    }
}

afterEvaluate {
    jacocoTestReport.dependsOn test
}