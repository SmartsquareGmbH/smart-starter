buildscript {
    ext {
        gradleVersion = '7.6.2'
        kotlinVersion = '1.9.0'
        springBootVersion = '3.2.0-M2'
        ktlintGradleVersion = '11.5.1'
        ktlintVersion = '0.50.0'
        detektVersion = '1.23.1'
        gradleVersionsPluginVersion = '0.47.0'
        jacocoPluginVersion = '0.16.0'
        jacocoVersion = '0.8.10'
        junitJupiterVersion = '5.10.0'
        junitVersion = '4.13.1'
        kluentVersion = '1.73'
        mockkVersion = '1.13.7'
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
        classpath "com.github.ben-manes:gradle-versions-plugin:$gradleVersionsPluginVersion"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detektVersion"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:$ktlintGradleVersion"
        classpath "com.vanniktech:gradle-android-junit-jacoco-plugin:$jacocoPluginVersion"
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply plugin: 'io.gitlab.arturbosch.detekt'
apply plugin: 'com.vanniktech.android.junit.jacoco'

group = 'de.smartsquare'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = 17

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '17'
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '17'
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.springframework.boot:spring-boot-devtools'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion"
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.amshove.kluent:kluent:$kluentVersion"
    testImplementation "io.mockk:mockk:$mockkVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
}

detekt {
    version = detektVersion

    allRules = true
    buildUponDefaultConfig = true

    source.setFrom('src/main/kotlin')

    config.setFrom('config/detekt/detekt.yml')
}

ktlint {
    version = ktlintVersion
    reporters {
        reporter 'checkstyle'
    }
}

junitJacoco {
    jacocoVersion = project.ext.jacocoVersion
}

wrapper {
    gradleVersion = project.ext.gradleVersion
}

afterEvaluate {
    jacocoTestReport.dependsOn test
}

tasks.named("detekt").configure {
    reports {
        xml.outputLocation.set(file("$buildDir/reports/detekt.xml"))
        html.outputLocation.set(file("$buildDir/reports/detekt.html"))
        txt.outputLocation.set(file("$buildDir/reports/detekt.txt"))
        sarif.outputLocation.set(file("$buildDir/reports/detekt.sarif"))
        md.outputLocation.set(file("$buildDir/reports/detekt.md"))
    }
}